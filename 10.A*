import heapq

def a_star(graph, heuristics, start, goal):
    open_set = []
    heapq.heappush(open_set, (heuristics[start], 0, start, [start]))
    visited = set()

    while open_set:
        f, g, current, path = heapq.heappop(open_set)

        if current == goal:
            return path, g

        if current in visited:
            continue
        visited.add(current)

        for neighbor, cost in graph.get(current, []):
            if neighbor not in visited:
                new_g = g + cost
                new_f = new_g + heuristics.get(neighbor, float('inf'))
                heapq.heappush(open_set, (new_f, new_g, neighbor, path + [neighbor]))

    return None, float('inf')


# -------------------------
# Input Section
# -------------------------
graph = {}
nodes = set()

num_edges = int(input("Enter number of edges: "))
print("Enter edges in the format 'PlaceA PlaceB cost':")
for _ in range(num_edges):
    while True:
        parts = input().split()
        if len(parts) == 3:
            u, v, c = parts
            try:
                c = int(c)
                graph.setdefault(u, []).append((v, c))
                nodes.update([u, v])
                break  # Valid input, exit loop
            except ValueError:
                print("Cost must be an integer. Please try again.")
        else:
            print("Invalid input. Enter exactly: PlaceA PlaceB cost")

heuristics = {}
print("\nEnter heuristic values for each place:")
for node in nodes:
    while True:
        try:
            h = int(input(f"Heuristic for {node}: "))
            heuristics[node] = h
            break
        except ValueError:
            print("Heuristic must be an integer. Please try again.")

start = input("\nEnter start place: ").strip()
goal = input("Enter goal place: ").strip()

# Run A*
path, cost = a_star(graph, heuristics, start, goal)

# Output
if path:
    print("\nPath:", " -> ".join(path))
    print("Total cost:", cost)
else:
    print("\nNo path found.")




INPUT/OUTPUT:
Enter number of edges: 3
Enter edges in the format 'PlaceA PlaceB cost':
HOME 5
Invalid input. Enter exactly: PlaceA PlaceB cost
HOME MALL 5
MALL OFFICE 2
HOME OFFICE 10

Enter heuristic values for each place:
Heuristic for HOME: 7
Heuristic for MALL: 3
Heuristic for OFFICE: 0

Enter start place: HOME
Enter goal place: OFFICE

Path: HOME -> MALL -> OFFICE
Total cost: 7
