def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

def is_moves_left(board):
    for row in board:
        if ' ' in row:
            return True
    return False

def evaluate(board):
    # Check rows for victory
    for row in board:
        if row[0] == row[1] == row[2] != ' ':
            return 10 if row[0] == 'O' else -10

    # Check columns for victory
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != ' ':
            return 10 if board[0][col] == 'O' else -10

    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return 10 if board[0][0] == 'O' else -10
    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return 10 if board[0][2] == 'O' else -10

    return 0

def minimax(board, depth, is_max):
    score = evaluate(board)
    if score == 10 or score == -10:
        return score
    if not is_moves_left(board):
        return 0

    if is_max:
        best = -1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'  # AI plays 'O'
                    best = max(best, minimax(board, depth + 1, False))
                    board[i][j] = ' '
        return best
    else:
        best = 1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'  # User plays 'X'
                    best = min(best, minimax(board, depth + 1, True))
                    board[i][j] = ' '
        return best

def find_best_move(board):
    best_val = -1000
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                move_val = minimax(board, 0, False)
                board[i][j] = ' '
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print("Tic-Tac-Toe: You are X, AI is O")
    print_board(board)

    while True:
        # User move
        while True:
            try:
                user_input = input("Enter your move (row and col, space separated, 0-2): ")
                row, col = map(int, user_input.strip().split())
                if 0 <= row <= 2 and 0 <= col <= 2 and board[row][col] == ' ':
                    board[row][col] = 'X'
                    break
                else:
                    print("Invalid move! Try again.")
            except ValueError:
                print("Please enter two integers between 0 and 2 separated by a space.")

        print("Board after your move:")
        print_board(board)

        if evaluate(board) == -10:
            print("You win!")
            break
        if not is_moves_left(board):
            print("It's a tie!")
            break

        # AI move
        print("AI is making a move...")
        move = find_best_move(board)
        if move == (-1, -1):
            print("It's a tie!")
            break
        board[move[0]][move[1]] = 'O'
        print_board(board)

        if evaluate(board) == 10:
            print("AI wins!")
            break
        if not is_moves_left(board):
            print("It's a tie!")
            break

if _name_ == "_main_":
    main()





INTPUT/OUTPUT:

Tic-Tac-Toe: You are X, AI is O
 | | 
-----
 | | 
-----
 | | 
-----
Enter your move (row and col, space separated, 0-2): 1 1
Board after your move:
 | | 
-----
 |X| 
-----
 | | 
-----
AI is making a move...
O| | 
-----
 |X| 
-----
 | | 
-----
Enter your move (row and col, space separated, 0-2): 1 2
Board after your move:
O| | 
-----
 |X|X
-----
 | | 
-----
AI is making a move...
O| | 
-----
O|X|X
-----
 | | 
-----
Enter your move (row and col, space separated, 0-2): 0 1
Board after your move:
O|X| 
-----
O|X|X
-----
 | | 
-----
AI is making a move...
O|X| 
-----
O|X|X
-----
O| | 
-----
AI wins!
