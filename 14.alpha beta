def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

def is_moves_left(board):
    return any(' ' in row for row in board)

def evaluate(board):
    # Check rows
    for row in board:
        if row[0] == row[1] == row[2] != ' ':
            return 10 if row[0] == 'O' else -10
    # Check columns
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != ' ':
            return 10 if board[0][col] == 'O' else -10
    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return 10 if board[0][0] == 'O' else -10
    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return 10 if board[0][2] == 'O' else -10
    return 0

def alpha_beta(board, alpha, beta, is_max):
    score = evaluate(board)
    if score == 10 or score == -10:
        return score
    if not is_moves_left(board):
        return 0

    if is_max:
        best = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    val = alpha_beta(board, alpha, beta, False)
                    board[i][j] = ' '
                    best = max(best, val)
                    alpha = max(alpha, best)
                    if beta <= alpha:
                        break
        return best
    else:
        best = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    val = alpha_beta(board, alpha, beta, True)
                    board[i][j] = ' '
                    best = min(best, val)
                    beta = min(beta, best)
                    if beta <= alpha:
                        break
        return best

def find_best_move(board):
    best_val = -float('inf')
    best_move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                move_val = alpha_beta(board, -float('inf'), float('inf'), False)
                board[i][j] = ' '
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move

def get_user_move(board):
    while True:
        try:
            user_input = input("Enter your move (row and col, 0-2, space separated): ")
            row, col = map(int, user_input.strip().split())
            if row in range(3) and col in range(3):
                if board[row][col] == ' ':
                    return row, col
                else:
                    print("That cell is already occupied. Try again.")
            else:
                print("Row and column must be between 0 and 2. Try again.")
        except ValueError:
            print("Invalid input. Enter two numbers separated by space (e.g., '1 2').")

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    print("Tic-Tac-Toe: You are X, AI is O")
    print_board(board)

    while True:
        # User move
        row, col = get_user_move(board)
        board[row][col] = 'X'
        print("Board after your move:")
        print_board(board)
        if evaluate(board) == -10:
            print("You win!")
            break
        if not is_moves_left(board):
            print("It's a tie!")
            break

        # AI move
        print("AI is making a move...")
        move = find_best_move(board)
        if move == (-1, -1):
            print("It's a tie!")
            break
        board[move[0]][move[1]] = 'O'
        print_board(board)
        if evaluate(board) == 10:
            print("AI wins!")
            break
        if not is_moves_left(board):
            print("It's a tie!")
            break

if _name_ == "_main_":
    main()



INPUT/OUTPUT:
Tic-Tac-Toe: You are X, AI is O
 | | 
-----
 | | 
-----
 | | 
-----
Enter your move (row and col, 0-2, space separated): 1 1
Board after your move:
 | | 
-----
 |X| 
-----
 | | 
-----
AI is making a move...
O| | 
-----
 |X| 
-----
 | | 
-----
Enter your move (row and col, 0-2, space separated): 12
Invalid input. Enter two numbers separated by space (e.g., '1 2').
Enter your move (row and col, 0-2, space separated): 1 2
Board after your move:
O| | 
-----
 |X|X
-----
 | | 
-----
AI is making a move...
O| | 
-----
O|X|X
-----
 | | 
-----
Enter your move (row and col, 0-2, space separated): 0 1
Board after your move:
O|X| 
-----
O|X|X
-----
 | | 
-----
AI is making a move...
O|X| 
-----
O|X|X
-----
O| | 
-----
AI wins!
